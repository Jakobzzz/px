#version 450 core

in vec3 Normal;  
in vec3 FragPos;  

out vec4 FragColor;

uniform vec3 color;
uniform vec3 direction; 
uniform vec3 viewPos; 
uniform float ambientStrength;
uniform float specularStrength;

void main()
{
	vec3 lightColor = vec3(1.f, 1.f, 1.f);

	//Ambient
    vec3 ambient = ambientStrength * lightColor;
  	
    //Diffuse 
    vec3 norm = normalize(Normal);
    vec3 lightDir = normalize(-direction);
    float diff = max(dot(norm, lightDir), 0.f);
    vec3 diffuse = diff * lightColor;
    
    //Specular
    vec3 viewDir = normalize(viewPos - FragPos);
    vec3 reflectDir = reflect(-lightDir, norm);  
    float spec = pow(max(dot(viewDir, reflectDir), 0.f), 32.f);
    vec3 specular = specularStrength * spec * lightColor;  
        
    vec3 result = (ambient + diffuse + specular) * color;
    FragColor = vec4(result, 1.f);
}